Only in examples/4-code-splitting-refactored: 3vs4.diff
Only in examples/5-with-immer: 4vs5.diff
diff -ur examples/4-code-splitting-refactored/SearchCommentsAPI.tsx examples/5-with-immer/SearchCommentsAPI.tsx
--- examples/4-code-splitting-refactored/SearchCommentsAPI.tsx	2019-12-14 23:14:51.000000000 +0900
+++ examples/5-with-immer/SearchCommentsAPI.tsx	2019-12-15 12:19:58.000000000 +0900
@@ -1,6 +1,7 @@
 import { useEffect } from 'react'
 import { useSelector, useDispatch, useStore } from 'react-redux'
 import { Dispatch, Store } from 'redux'
+import produce from 'immer'
 import { RootState } from './reducer'
 import { StoreExt } from './storeEnhancer'
 
@@ -87,69 +88,50 @@
       error: true
     }
 
-export function reducer(state: RootState, action: Actions): RootState {
+export const reducer = produce(function(
+  state: RootState,
+  action: Actions,
+): void {
   switch (action.type) {
     case 'API.Comments.Start': {
       const { postId } = action.payload
       const { posts } = state
 
-      return {
-        ...state,
-        posts: posts.map(post => {
-          if (post.id !== postId) {
-            return post
-          }
-
-          return {
-            ...post,
-            commentsStatus: 'loading',
-          }
-        }),
-      }
+      const post = posts.find(p => p.id === postId)
+      if (!post) return
+
+      post.commentsStatus = 'loading'
+
+      return
     }
 
     case 'API.Comments.Complete': {
       const { postId, comments } = action.payload
       const { posts } = state
 
-      return {
-        ...state,
-        posts: posts.map(post => {
-          if (post.id !== postId) {
-            return post
-          }
-
-          return {
-            ...post,
-            commentsStatus: 'complete',
-            comments,
-          }
-        }),
-      }
+      const post = posts.find(p => p.id === postId)
+      if (!post) return
+
+      post.commentsStatus = 'complete'
+      post.comments = comments
+
+      return
     }
 
     case 'API.Comments.Error': {
       const { postId } = action.payload
       const { posts } = state
 
-      return {
-        ...state,
-        posts: posts.map(post => {
-          if (post.id !== postId) {
-            return post
-          }
-
-          return {
-            ...post,
-            commentsStatus: 'error',
-          }
-        }),
-      }
+      const post = posts.find(p => p.id === postId)
+      if (!post) return
+
+      post.commentsStatus = 'error'
+
+      return
     }
 
     default: {
       const _: never = action
-      return state
     }
   }
-}
+})
diff -ur examples/4-code-splitting-refactored/SearchPostsAPI.tsx examples/5-with-immer/SearchPostsAPI.tsx
--- examples/4-code-splitting-refactored/SearchPostsAPI.tsx	2019-12-14 23:15:16.000000000 +0900
+++ examples/5-with-immer/SearchPostsAPI.tsx	2019-12-15 12:27:57.000000000 +0900
@@ -1,6 +1,7 @@
 import { useEffect } from 'react'
 import { useSelector, useDispatch, useStore } from 'react-redux'
 import { Dispatch, Store } from 'redux'
+import produce from 'immer'
 import { RootState } from './reducer'
 import { StoreExt } from './storeEnhancer'
 
@@ -82,39 +83,38 @@
       error: true
     }
 
-export function reducer(state: RootState, action: Actions): RootState {
+export const reducer = produce(function(
+  state: RootState,
+  action: Actions,
+): void {
   switch (action.type) {
     case 'API.Posts.Start': {
-      return {
-        ...state,
-        postsStatus: 'loading',
-      }
+      state.postsStatus = 'loading'
+
+      return
     }
 
     case 'API.Posts.Complete': {
       const { posts } = action.payload
 
-      return {
-        ...state,
-        postsStatus: 'complete',
-        posts: posts.map(post => ({
-          ...post,
-          commentsStatus: 'waiting',
-          comments: [],
-        })),
-      }
+      state.postsStatus = 'complete'
+      state.posts = posts.map(post => ({
+        ...post,
+        commentsStatus: 'waiting',
+        comments: [],
+      }))
+
+      return
     }
 
     case 'API.Posts.Error': {
-      return {
-        ...state,
-        postsStatus: 'error',
-      }
+      state.postsStatus = 'error'
+
+      return
     }
 
     default: {
       const _: never = action
-      return state
     }
   }
-}
+})
diff -ur examples/4-code-splitting-refactored/reducer.ts examples/5-with-immer/reducer.ts
--- examples/4-code-splitting-refactored/reducer.ts	2019-12-14 23:09:13.000000000 +0900
+++ examples/5-with-immer/reducer.ts	2019-12-15 12:08:27.000000000 +0900
@@ -1,3 +1,5 @@
+import produce from 'immer'
+
 export type RootState = {
   query: string
   postsStatus: 'initial' | 'waiting' | 'loading' | 'complete' | 'error'
@@ -25,27 +27,24 @@
   }
 }
 
-export default function reducer(
+export default produce(function reducer(
   state: RootState | undefined = {
     query: '',
     postsStatus: 'initial',
     posts: [],
   },
   action: Actions,
-): RootState {
+): void | RootState {
   switch (action.type) {
     case 'Search.Posts.Submit': {
       const { postsStatus } = state
-      if (postsStatus === 'waiting' || postsStatus === 'loading') {
-        return state
-      }
+      if (postsStatus === 'waiting' || postsStatus === 'loading') return
 
       const { query } = action.payload
-      return {
-        ...state,
-        query,
-        postsStatus: 'waiting',
-      }
+      state.query = query
+      state.postsStatus = 'waiting'
+
+      return
     }
 
     default: {
@@ -53,4 +52,4 @@
       return state
     }
   }
-}
+})
